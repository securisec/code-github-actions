{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Github Actions Schema",
	"type": "object",
	"properties": {
		"name": {
			"type": "string",
			"description": "The name of your workflow. GitHub displays the names of your workflows on your repository's actions page. If you omit name, GitHub sets it to the workflow file path relative to the root of the repository."
		},
		"env": {
			"type": "object",
			"patternProperties": {
				"^[A-Za-z0-9\\-_]*$": {
					"type": ["string", "number", "null"]
				}
			}
		},
		"on": {
			"description": "Required The name of the GitHub event that triggers the workflow. You can provide a single event string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. For a list of available events, see \"Events that trigger workflows.\"",
			"oneOf": [
				{
					"type": "string",
					"$ref": "#/definitions/On_Events",
					"default": "push"
				},
				{
					"type": "array",
					"items": {
						"type": "string",
						"$ref": "#/definitions/On_Events"
					}
				},
				{
					"type": "object",
					"properties": {
						"check_run": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": [
											"created",
											"rerequested",
											"completed",
											"requested_action"
										]
									}
								}
							}
						},
						"check_suite": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["completed", "requested", "rerequested"]
									}
								}
							}
						},
						"create": {
							"type": "object",
							"properties": {}
						},
						"delete": {
							"type": "object",
							"properties": {}
						},
						"deployment": {
							"type": "object",
							"properties": {}
						},
						"deployment_status": {
							"type": "object",
							"properties": {}
						},
						"fork": {
							"type": "object",
							"properties": {}
						},
						"gollum": {
							"type": "object",
							"properties": {}
						},
						"issue_comment": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["created", "edited", "deleted"]
									}
								}
							}
						},
						"issues": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": [
											"opened",
											"edited",
											"deleted",
											"transferred",
											"pinned",
											"unpinned",
											"closed",
											"reopened",
											"assigned",
											"unassigned",
											"labeled",
											"unlabeled",
											"locked",
											"unlocked",
											"milestoned",
											"demilestoned"
										]
									}
								}
							}
						},
						"label": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["created", "edited", "deleted"]
									}
								}
							}
						},
						"milestone": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["created", "closed", "opened", "edited", "deleted"]
									}
								}
							}
						},
						"page_build": {
							"type": "object",
							"properties": {}
						},
						"project": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": [
											"created",
											"updated",
											"closed",
											"reopened",
											"edited",
											"deleted"
										]
									}
								}
							}
						},
						"project_card": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": [
											"created",
											"moved",
											"converted",
											"edited",
											"deleted"
										]
									}
								}
							}
						},
						"project_column": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["created", "moved", "updated", "deleted"]
									}
								}
							}
						},
						"public": {
							"type": "object",
							"properties": {}
						},
						"pull_request_review": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["submitted", "edited", "dismissed"]
									}
								}
							}
						},
						"pull_request_review_comment": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["created", "edited", "deleted"]
									}
								}
							}
						},
						"pull_request": {
							"type": "object",
							"allOf": [{ "$ref": "#/definitions/PushPullShared" }],
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": [
											"assigned",
											"unassigned",
											"labeled",
											"unlabeled",
											"opened",
											"edited",
											"closed",
											"reopened",
											"synchronize",
											"ready_for_review",
											"locked",
											"unlocked",
											"review_requested",
											"review_request_removed"
										]
									}
								}
							}
						},
						"push": {
							"type": "object",
							"$ref": "#/definitions/PushPullShared"
						},
						"registry_package": {
							"type": "object",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["published", "updated"]
									}
								}
							}
						},
						"release": {
							"type": "object",
							"description": "Runs your workflow anytime the release event occurs. More than one activity type triggers this event.",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": [
											"published",
											"unpublished",
											"created",
											"edited",
											"deleted",
											"prereleased"
										]
									}
								}
							}
						},
						"status": {
							"type": "object",
							"description": "Runs your workflow anytime the status of a Git commit changes, which triggers the status event.",
							"properties": {}
						},
						"watch": {
							"type": "object",
							"description": "Runs your workflow anytime the watch event occurs. More than one activity type triggers this event.",
							"properties": {
								"types": {
									"type": "array",
									"items": {
										"type": "string",
										"enum": ["started"]
									}
								}
							}
						},
						"schedule": {
							"type": "array",
							"description": "You can schedule a workflow to run at specific UTC times using POSIX cron syntax. Scheduled workflows run on the latest commit on the default or base branch. The shortest interval you can run scheduled workflows is once every 5 minutes",
							"items": {
								"type": "object",
								"properties": {
									"cron": {
										"description": "* is a special character in YAML so you have to quote this string",
										"type": "string"
									}
								}
							}
						},
						"repository_dispatch": {
							"type": "object",
							"description": "You can use the GitHub API to trigger a webhook event called repository_dispatch when you want to trigger a workflow for activity that happens outside of GitHub",
							"properties": {}
						},
						"workflow_dispatch": {
							"type": "object",
							"description": "You can manually trigger a workflow from the repository when this event is present",
							"properties": {}
						}
					}
				}
			]
		},
		"jobs": {
			"type": "object",
			"description": "A workflow run is made up of one or more jobs. Jobs run in parallel by default.",
			"patternProperties": {
				"^([_A-Z-a-z])[A-Za-z0-9-_]+$": {
					"required": ["runs-on"],
					"type": "object",
					"description": "Each job must have an id to associate with the job.",
					"properties": {
						"name": {
							"type": "string",
							"description": "The name of the job displayed on GitHub."
						},
						"needs": {
							"description": "Identifies any jobs that must complete successfully before this job will run. It can be a string or array of strings. If a job fails, all jobs that need it are skipped unless the jobs use a conditional statement that causes the job to continue.",
							"oneOf": [
								{ "type": "string" },
								{ "type": "array", "items": { "type": "string" } }
							]
						},
						"runs-on": {
							"anyOf": [
								{ "type": "string" },
								{ "type": "string", "$ref": "#/definitions/RunsOn" },
								{
									"type": "array",
									"items": {
										"type": "string",
										"$ref": "#/definitions/RunsOn"
									}
								}
							]
						},
						"env": {
							"type": "object",
							"patternProperties": {
								"^[A-Za-z0-9-_]+$": {}
							}
						},
						"if": { "type": "string" },
						"steps": {
							"type": "array",
							"items": {
								"type": "object",
								"allOf": [{ "$ref": "./github-popularactions.json" }],
								"properties": {
									"name": {
										"type": "string",
										"description": "A name for your step to display on GitHub."
									},
									"id": {
										"type": "string",
										"description": "A unique identifier for the step. You can use the id to reference the step in contexts."
									},
									"if": {
										"type": "string",
										"description": "You can use the if conditional to prevent a step from running unless a condition is met. You can use any supported context and expression to create a conditional.",
										"anyOf": [
											{ "type": "string" },
											{
												"type": "string",
												"enum": [
													"always($1)",
													"cancelled()",
													"failure()",
													"github.event_path",
													"github.workflow",
													"github.job",
													"github.run_id",
													"github.run_number",
													"github.actor",
													"github.repository",
													"github.repository_owner",
													"github.event_name",
													"github.sha",
													"github.ref",
													"github.head_ref",
													"github.base_ref",
													"github.token",
													"github.workspace",
													"github.action",
													"env.<env_name>",
													"job.status",
													"job.container.network",
													"job.container.id",
													"os"
												]
											}
										]
									},
									"run": {
										"type": "string",
										"description": "Runs command-line programs using the operating system's shell. If you do not provide a name, the step name will default to the text specified in the run command."
									},
									"env": {
										"type": "object",
										"description": "Sets environment variables for steps to use in the runner environment. You can also set environment variables for the entire workflow or a job. For more information, see env and jobs.<job_id>.env.",
										"patternProperties": {
											"^[A-Za-z0-9-_]": { "type": "string" }
										}
									},
									"continue-on-error": {
										"type": "boolean",
										"description": "Prevents a job from failing when a step fails. Set to true to allow a job to pass when this step fails."
									},
									"timeout-minutes": {
										"type": "number",
										"description": "The maximum number of minutes to run the step before killing the process."
									},
									"with": {
										"type": "object",
										"patternProperties": {
											"^[a-zA-Z0-9-_].+$": {}
										}
									},
									"uses": {
										"anyOf": [
											{
												"type": "string",
												"description": "Selects an action to run as part of a step in your job. An action is a reusable unit of code. You can use an action defined in the same repository as the workflow, a public repository, or in a published Docker container image."
											},
											{
												"type": "string",
												"$ref": "#/definitions/PopularActions"
											}
										]
									}
								},
								"anyOf": [
									{
										"if": {
											"properties": {
												"uses": { "const": "actions/checkout@v2" }
											}
										},
										"then": {
											"type": "object",
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"repository": { "type": "string" },
														"ref": { "type": "string" },
														"token": { "type": "string" },
														"ssh-key": { "type": "string" },
														"ssh-known-hosts": { "type": "string" },
														"ssh-strict": { "type": "string" },
														"persist-credentials": { "type": "boolean" },
														"path": { "type": "string" },
														"clean": { "type": "boolean" },
														"fetch-depth": { "type": "number" },
														"lfs": { "type": "boolean" },
														"submodules": { "type": "boolean" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "actions/cache@v1.1.2" }
											}
										},
										"type": "object",
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"path": { "type": "string" },
														"key": { "type": "string" },
														"restore-keys": { "type": "array" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": {
													"const": "actions/upload-release-asset@v1.0.2"
												}
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"upload_url": { "type": "string" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "actions/create-release@v1" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"tag_name": { "type": "string" },
														"release_name": { "type": "string" },
														"body": { "type": "string" },
														"draft": { "type": "boolean" },
														"prerelease": { "type": "boolean" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "elgohr/ecr-login-action@master" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"required": [
														"aws_key",
														"secret_access_key",
														"region"
													],
													"properties": {
														"aws_key": {
															"type": "string",
															"description": "The AWS key"
														},
														"secret_access_key": {
															"type": "string",
															"description": "AWS secret access key"
														},
														"region": {
															"type": "string",
															"description": "the region you would like to login to"
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "elgohr/gcloud-login-action@master" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"required": ["account_key"],
													"properties": {
														"account_key": {
															"type": "string",
															"description": "Base64 encoded service account key exported as JSON"
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": {
													"const": "elgohr/Publish-Docker-Github-Action@master"
												}
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"required": ["name", "username", "password"],
													"properties": {
														"name": {
															"type": "string",
															"description": "the name of the image you would like to push"
														},
														"username": {
															"type": "string",
															"description": "the login username for the registry. If you're using GitHub Packages, you might also want to use ${{ github.actor }} as the username"
														},
														"password": {
															"type": "string",
															"description": "the authentication token [preferred] or login password for the registry"
														},
														"registry": {
															"type": "string",
															"description": "Use registry for pushing to a custom registry."
														},
														"snapshot": {
															"type": "boolean",
															"description": "Use snapshot to push an additional image, which is tagged with {YEAR}{MONTH}{DAY}{HOUR}{MINUTE}{SECOND}{first 6 digits of the git sha}"
														},
														"dockerfile": {
															"type": "string",
															"description": "Use dockerfile when you would like to explicitly build a Dockerfile."
														},
														"workdir": {
															"type": "string",
															"description": "Use workdir when you would like to change the directory for building"
														},
														"context": {
															"type": "string",
															"description": "Use context when you would like to change the Docker build context."
														},
														"buildargs": {
															"type": "string",
															"description": "Use buildargs when you want to pass a list of environment variables as build-args"
														},
														"buildoptions": {
															"type": "string",
															"description": "Use buildoptions when you want to configure options for building."
														},
														"cache": {
															"type": "string",
															"description": "Use cache when you have big images, that you would only like to build partially (changed layers)"
														},
														"tags": {
															"type": "string",
															"default": "latest",
															"description": "This action supports multiple options that tags are handled"
														},
														"tag_names": {
															"type": "boolean",
															"description": "Use tag_names when you want to push tags/release by their git name (e.g. refs/tags/MY_TAG_NAME)"
														},
														"tag_semver": {
															"type": "boolean",
															"description": "Use tag_semver when you want to push tags using the semver syntax by their git name (e.g. refs/tags/v1.2.3)"
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "actions/setup-python@v1.2.0" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"python-version": { "type": "string" },
														"architecture": { "type": "string" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "actions/setup-node@v1.1.0" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"node-version": { "type": "string" },
														"registry-url": { "type": "string" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": {
													"const": "sonarsource/sonarcloud-github-action@master"
												}
											}
										},
										"then": {
											"description": "[Docs](https://github.com/marketplace/actions/sonarcloud-scan)",
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"projectBaseDir": { "type": "string" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "actions/setup-go@v2" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"go-version": { "type": "string" },
														"stable": {
															"type": "string",
															"enum": ["true", "false"]
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "peaceiris/actions-gh-pages@v3" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"github_token": {
															"type": "string",
															"enum": ["${{ secrets.GITHUB_TOKEN }}"],
															"default": "${{ secrets.GITHUB_TOKEN }}",
															"description": "This option is for GITHUB_TOKEN, not a personal access token."
														},
														"deploy_key": {
															"type": "string",
															"description": "SSH Deploy key"
														},
														"personal_token": {
															"type": "string",
															"description": "Generated personal access token with repo permission"
														},
														"publish_branch": {
															"type": "string",
															"default": "gh-pages",
															"description": "A target branch to deploy to GitHub Pages. The default is gh-pages"
														},
														"publish_dir": {
															"type": "string",
															"default": "public"
														},
														"cname": {
															"type": "string",
															"description": "To add CNAME file, we can set the cname option."
														},
														"enable_jekyll": {
															"type": "boolean",
															"default": false,
															"description": "If you want GitHub Pages to process your site with the static site generator Jekyll, set enable_jekyll to true"
														},
														"allow_empty_commit": {
															"type": "boolean",
															"description": "By default, a commit will not be generated when no file changes. If you want to allow an empty commit, set the optional parameter allow_empty_commit to true"
														},
														"keep_files": {
															"type": "boolean",
															"description": "By default, existing files in the publish branch are removed before adding the ones from publish dir. If you want the action to add new files but leave existing ones untouched, set the optional parameter keep_files to true"
														},
														"external_repository": {
															"type": "string",
															"description": "By default, your files are published to the repository which is running this action. If you want to publish to another repository on GitHub, set the environment variable external_repository to <username>/<external-repository>."
														},
														"force_orphan": {
															"type": "boolean",
															"description": "We can set the force_orphan: true option. This allows you to make your publish branch with only the latest commit"
														},
														"user_name": {
															"type": "string",
															"description": "Set custom git config user.name and git config user.email. A commit is always created with the same user."
														},
														"user_email": {
															"type": "string",
															"description": "Set custom git config user.name and git config user.email. A commit is always created with the same user."
														},
														"commit_message": {
															"type": "string",
															"description": "Set a custom commit message"
														},
														"tag_name": {
															"type": "string"
														},
														"tag_message": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "codecov/codecov-action@v1.0.6" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"token": { "type": "string" },
														"file": { "type": "string" },
														"flags": { "type": "string" },
														"name": { "type": "string" },
														"fail_ci_if_error": { "type": "boolean" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "docker/build-push-action@v1.0.1" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"required": ["repository"],
													"properties": {
														"repository": { "type": "string" },
														"username": { "type": "string" },
														"password": { "type": "string" },
														"registry": { "type": "string" },
														"tags": { "type": "string" },
														"tag_with_ref": { "type": "boolean" },
														"tag_with_sha": { "type": "boolean" },
														"path": { "type": "string" },
														"always_pull": { "type": "boolean" },
														"build_args": { "type": "string" },
														"push": { "type": "boolean" },
														"add_git_labels": { "type": "boolean" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "rtCamp/action-slack-notify@v2.0.1" }
											}
										},
										"then": {
											"properties": {
												"env": {
													"type": "object",
													"required": [
														"SLACK_CHANNEL",
														"SLACK_TITLE",
														"SLACK_WEBHOOK"
													],
													"properties": {
														"SLACK_WEBHOOK": { "type": "string" },
														"SLACK_CHANNEL": { "type": "string" },
														"SLACK_TITLE": { "type": "string" },
														"SLACK_USERNAME": {
															"type": "string",
															"default": "rtBot"
														},
														"SLACK_ICON": {
															"type": "string",
															"default": "https://github.com/rtCamp.png?size=48"
														},
														"SLACK_ICON_EMOJI": {
															"type": "string",
															"default": "\":bell:\""
														},
														"SLACK_COLOR": {
															"type": "string",
															"default": "\"#efefef\""
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": {
													"const": "GoogleCloudPlatform/github-actions/setup-gcloud@master"
												}
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"version": {
															"type": "string",
															"default": "latest"
														},
														"service_account_email": { "type": "string" },
														"service_account_key": { "type": "string" },
														"export_default_credentials": {
															"type": "boolean",
															"default": true
														},
														"project_id": { "type": "boolean" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "w9jds/firebase-action@v1.3.0" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"required": ["args"],
													"properties": {
														"args": { "type": "string", "default": "latest" }
													}
												},
												"env": {
													"type": "object",
													"required": ["FIREBASE_TOKEN"],
													"properties": {
														"FIREBASE_TOKEN": { "type": "string" },
														"PROJECT_ID": { "type": "string" },
														"PROJECT_PATH": { "type": "string" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": {
													"const": "pascalgn/npm-publish-action@4f4bf159e299f65d21cd1cbd96fc5d53228036df"
												}
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"tag_name": { "type": "string" },
														"tag_message": { "type": "string" },
														"commit_pattern": { "type": "string" }
													}
												},
												"env": {
													"type": "object",
													"required": ["GITHUB_TOKEN", "NPM_AUTH_TOKEN"],
													"properties": {
														"GITHUB_TOKEN": {
															"type": "string",
															"default": "${{ secrets.GITHUB_TOKEN }}",
															"description": "Leave unchanged"
														},
														"NPM_AUTH_TOKEN": {
															"type": "string",
															"default": "${{ secrets.NPM_AUTH_TOKEN }}"
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": {
													"const": "pypa/gh-action-pypi-publish@v1.1.0"
												}
											}
										},
										"then": {
											"properties": {
												"if": {
													"type": "string",
													"default": "github.event_name == 'push' && startsWith(github.ref, 'refs/tags')"
												},
												"with": {
													"type": "object",
													"required": ["user", "password"],
													"properties": {
														"user": { "type": "string" },
														"password": { "type": "string" },
														"repository_url": { "type": "string" },
														"packages_dir": { "type": "string" },
														"verify_metadata": { "type": "boolean" }
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": { "const": "actions/setup-java@v1" }
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"properties": {
														"java-version": {
															"oneOf": [
																{ "type": "string" },
																{
																	"type": "string",
																	"default": "8",
																	"enum": [
																		"6",
																		"7",
																		"8",
																		"9",
																		"10",
																		"11",
																		"12",
																		"13"
																	]
																}
															]
														},
														"java-package": {
															"type": "string",
															"default": "jdk",
															"enum": ["jdk", "jre", "jdk+fx"]
														},
														"architecture": {
															"type": "string",
															"default": "x64",
															"enum": ["x64", "x86"]
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"uses": {
													"oneOf": [
														{ "const": "actions/upload-artifact@v2" },
														{ "const": "actions/download-artifact@v2" }
													]
												}
											}
										},
										"then": {
											"properties": {
												"with": {
													"type": "object",
													"required": ["name"],
													"properties": {
														"name": { "type": "string" },
														"path": { "type": "string" }
													}
												}
											}
										}
									},
									{
										"else": {
											"properties": {
												"with": { "type": "object", "properties": {} }
											}
										}
									}
								]
							}
						},
						"timeout-minutes": {
							"type": "number",
							"description": "The maximum number of minutes to run the step before killing the process."
						},
						"strategy": {
							"type": "object",
							"properties": {
								"matrix": {
									"type": "object",
									"properties": {
										"os": {
											"type": "array",
											"items": {
												"type": "string",
												"$ref": "#/definitions/RunsOn"
											}
										},
										"include": {
											"type": "array",
											"items": {
												"type": "object",
												"patternProperties": {
													"^[a-zA-Z0-9-_]+$": {}
												}
											}
										},
										"exclude": {
											"type": "array",
											"items": {
												"type": "object",
												"patternProperties": {
													"^[a-zA-Z0-9-_]+$": {}
												}
											}
										}
									},
									"patternProperties": {
										"^[a-zA-Z0-9-_]+$": {
											"anyOf": [
												{
													"type": "array",
													"items": { "type": "string" }
												},
												{ "type": "string" }
											]
										}
									}
								},
								"fail-fast": {
									"type": "boolean",
									"description": "When set to true, GitHub cancels all in-progress jobs if any matrix job fails. Default: true",
									"default": true
								},
								"max-parallel": {
									"type": "number",
									"description": "The maximum number of jobs that can run simultaneously when using a matrix job strategy. By default, GitHub will maximize the number of jobs run in parallel depending on the available runners on GitHub-hosted virtual machines."
								}
							}
						},
						"container": {
							"description": "A container to run any steps in a job that don't already specify a container.",
							"oneOf": [
								{ "type": "string" },
								{
									"type": "object",
									"required": ["image"],
									"$ref": "#/definitions/ContainerServices"
								}
							]
						},
						"services": {
							"description": "Used to host service containers for a job in a workflow. Service containers are useful for creating databases or cache services like Redis. The runner automatically creates a Docker network and manages the life cycle of the service containers.",
							"type": "object",
							"patternProperties": {
								"^[a-zA-Z0-9-_]+$": {
									"type": "object",
									"$ref": "#/definitions/ContainerServices"
								}
							}
						}
					}
				}
			}
		}
	},
	"definitions": {
		"ContainerServices": {
			"properties": {
				"image": {
					"type": "string",
					"description": "The Docker image to use as the container to run the action. The value can be the Docker Hub image name or a public docker registry name."
				},
				"env": {
					"type": "object",
					"properties": {},
					"description": "Sets a map of environment variables in the container."
				},
				"ports": {
					"type": "array",
					"items": { "type": "number" },
					"description": "Sets an array of ports to expose on the container."
				},
				"volumes": {
					"type": "array",
					"items": { "type": "string" },
					"description": "Sets an array of volumes for the container to use."
				},
				"options": {
					"type": "string",
					"description": "Additional Docker container resource options. For a list of options, see \"docker create options.\""
				}
			}
		},
		"RunsOn": {
			"anyOf": [
				{ "type": "string" },
				{
					"enum": [
						"windows-latest",
						"windows-2019",
						"ubuntu-latest",
						"ubuntu-18.04",
						"ubuntu-16.04",
						"macos-latest",
						"macos-10.15"
					]
				}
			]
		},
		"On_Events": {
			"enum": [
				"check_run",
				"check_suite",
				"create",
				"delete",
				"deployment",
				"deployment_status",
				"fork",
				"gollum",
				"issue_comment",
				"issues",
				"label",
				"milestone",
				"page_build",
				"project",
				"project_card",
				"project_column",
				"public",
				"pull_request",
				"pull_request_review",
				"pull_request_review_comment",
				"push",
				"registry_package",
				"release",
				"status",
				"watch",
				"schedule",
				"repository_dispatch"
			]
		},
		"PushPullShared": {
			"type": "object",
			"properties": {
				"branches": {
					"type": "array",
					"items": {
						"type": "string",
						"default": "master"
					}
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"branches-ignore": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"tags-ignore": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"paths": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"paths-ignore": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PopularActions": {
			"enum": [
				"actions/checkout@v2",
				"actions/upload-artifact@v2",
				"actions/download-artifact@v2",
				"actions/cache@v1.1.2",
				"actions/create-release@v1",
				"actions/upload-release-asset@v1.0.2",
				"actions/setup-python@v1.2.0",
				"actions/setup-node@v1.1.0",
				"actions/setup-go@v2",
				"sonarsource/sonarcloud-github-action@master",
				"codecov/codecov-action@v1.0.6",
				"docker/build-push-action@v1.0.1",
				"rtCamp/action-slack-notify@v2.0.1",
				"GoogleCloudPlatform/github-actions/setup-gcloud@master",
				"w9jds/firebase-action@v1.3.0",
				"actions/setup-java@v1",
				"pypa/gh-action-pypi-publish@v1.1.0",
				"pascalgn/npm-publish-action@4f4bf159e299f65d21cd1cbd96fc5d53228036df",
				"elgohr/Publish-Docker-Github-Action@master",
				"elgohr/gcloud-login-action@master",
				"elgohr/ecr-login-action@master",
				"peaceiris/actions-gh-pages@v3"
			]
		}
	}
}
